// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	cqrs "core/cqrs"

	mock "github.com/stretchr/testify/mock"
)

// CommandBus is an autogenerated mock type for the CommandBus type
type CommandBus struct {
	mock.Mock
}

type CommandBus_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandBus) EXPECT() *CommandBus_Expecter {
	return &CommandBus_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, command
func (_m *CommandBus) Dispatch(ctx context.Context, command cqrs.Command) error {
	ret := _m.Called(ctx, command)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cqrs.Command) error); ok {
		r0 = rf(ctx, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommandBus_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type CommandBus_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - command cqrs.Command
func (_e *CommandBus_Expecter) Dispatch(ctx interface{}, command interface{}) *CommandBus_Dispatch_Call {
	return &CommandBus_Dispatch_Call{Call: _e.mock.On("Dispatch", ctx, command)}
}

func (_c *CommandBus_Dispatch_Call) Run(run func(ctx context.Context, command cqrs.Command)) *CommandBus_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cqrs.Command))
	})
	return _c
}

func (_c *CommandBus_Dispatch_Call) Return(_a0 error) *CommandBus_Dispatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommandBus_Dispatch_Call) RunAndReturn(run func(context.Context, cqrs.Command) error) *CommandBus_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommandBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandBus creates a new instance of CommandBus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandBus(t mockConstructorTestingTNewCommandBus) *CommandBus {
	mock := &CommandBus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
