// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	events "core/events"

	mock "github.com/stretchr/testify/mock"
)

// Bus is an autogenerated mock type for the Bus type
type Bus struct {
	mock.Mock
}

type Bus_Expecter struct {
	mock *mock.Mock
}

func (_m *Bus) EXPECT() *Bus_Expecter {
	return &Bus_Expecter{mock: &_m.Mock}
}

// Dispatch provides a mock function with given fields: ctx, _a1
func (_m *Bus) Dispatch(ctx context.Context, _a1 ...events.DomainEvent) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Bus_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type Bus_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 ...events.DomainEvent
func (_e *Bus_Expecter) Dispatch(ctx interface{}, _a1 ...interface{}) *Bus_Dispatch_Call {
	return &Bus_Dispatch_Call{Call: _e.mock.On("Dispatch",
		append([]interface{}{ctx}, _a1...)...)}
}

func (_c *Bus_Dispatch_Call) Run(run func(ctx context.Context, _a1 ...events.DomainEvent)) *Bus_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]events.DomainEvent, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(events.DomainEvent)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Bus_Dispatch_Call) Return() *Bus_Dispatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *Bus_Dispatch_Call) RunAndReturn(run func(context.Context, ...events.DomainEvent)) *Bus_Dispatch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewBus interface {
	mock.TestingT
	Cleanup(func())
}

// NewBus creates a new instance of Bus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBus(t mockConstructorTestingTNewBus) *Bus {
	mock := &Bus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
